punteggio = 0;
	std::vector<cella> parola;
	std::vector<cella> incrocio;

	if (letter.at(0).getX() == letter.at(letter.size() - 1).getX())  //veritcale
	{
		getCells(letter.at(0), 'v', parola);
		for (int i = 0; i<parola.size();i++)
		{
			if (parola.at(i).getH() == 1)
				punteggio += 2;
			else
				punteggio += 1;
			
			incrocio.clear();
			getCells(parola.at(i), 'o', incrocio);
			
			if (incrocio.size()>1)
			{
				for (int j = 0; j<incrocio.size();j++) {
					if (incrocio.at(i).getH() == 0 && incrocio.at(j).getY() != parola.at(i).getY())
						punteggio += 2;
					else if (incrocio.at(j).getY() != parola.at(i).getY())
						punteggio += 1;
				}
			}
			if(parola.at(i).getCharacter()=='q')
				punteggio+=2;

		}

	}
	else      //orizzontale
	{
		getCells(letter.at(0), 'o', parola);
		for (int i = 0; i<parola.size();i++)
		{
			if (parola.at(i).getH() == 0)
				punteggio += 2;
			else
				punteggio += 1;
			getCells(parola.at(i), 'v', incrocio);
			if (incrocio.size()>1)
			{
				for (int j = 0; j<incrocio.size();j++) {
					if (incrocio.at(j).getH() == 0 && incrocio.at(j).getX() != parola.at(i).getX())
						punteggio += 2;
					else if (incrocio.at(j).getX() != parola.at(i).getX())
						punteggio += 1;
				}
			}
			if(parola.at(i).getCharacter()=='q')
				punteggio+=2;

		}
	}
	if(parola.size()==costanti::MAX_LETTERS_HAND)
		punteggio+=20;